diff --git a/drivers/remoteproc/Kconfig b/drivers/remoteproc/Kconfig
index 62f8548fb46a..2267c1cb0f37 100644
--- a/drivers/remoteproc/Kconfig
+++ b/drivers/remoteproc/Kconfig
@@ -364,6 +364,13 @@ config TI_K3_R5_REMOTEPROC
 	  It's safe to say N here if you're not interested in utilizing
 	  a slave processor.

+config RZ_REMOTEPROC
+	tristate "Renesas RZ remoteproc support"
+	select MFD_SYSCON
+	help
+	  Say y here to support RZ/G3S's remote processors (CM33, CM33_FPU) via the remote
+	  processor framework.
+
 config XLNX_R5_REMOTEPROC
 	tristate "Xilinx R5 remoteproc support"
 	depends on PM && ARCH_ZYNQMP

diff --git a/drivers/remoteproc/Makefile b/drivers/remoteproc/Makefile
index 5ff4e2fee4ab..0470aead700f 100644
--- a/drivers/remoteproc/Makefile
+++ b/drivers/remoteproc/Makefile
@@ -40,3 +40,4 @@ obj-$(CONFIG_TI_K3_DSP_REMOTEPROC)	+= ti_k3_dsp_remoteproc.o
 obj-$(CONFIG_TI_K3_M4_REMOTEPROC)	+= ti_k3_m4_remoteproc.o
 obj-$(CONFIG_TI_K3_R5_REMOTEPROC)	+= ti_k3_r5_remoteproc.o
 obj-$(CONFIG_XLNX_R5_REMOTEPROC)	+= xlnx_r5_remoteproc.o
+obj-$(CONFIG_RZ_REMOTEPROC)		+= rz_rproc.o

diff --git a/drivers/remoteproc/rz_rproc.c b/drivers/remoteproc/rz_rproc.c
new file mode 100644
index 0000000..2e7688f
--- /dev/null
+++ b/drivers/remoteproc/rz_rproc.c
@@ -0,0 +1,566 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/of_reserved_mem.h>
+#include <linux/remoteproc.h>
+#include <linux/reset.h>
+#include <linux/mfd/syscon.h>
+#include <linux/regmap.h>
+#include <linux/pm_runtime.h>
+#include <linux/platform_device.h>
+#include "remoteproc_internal.h"
+
+#define CM33_SRAM_START	(0x00000000)
+#define CM33_SRAM_END		(0x3FFFFFFF)
+#define CM33_DDR_START		(0x60000000)
+#define CM33_DDR_END		(0x7FFFFFFF)
+
+#define CA55_SRAM_START	(0x00000000)
+#define CA55_DDR_START		(0x40000000)
+#define CA55_DDR_CM33_START	(0x40010000)
+#define CA55_DDR_CM33_END	(0x43EFFFFF)
+
+#define BOOTCPUSEL_MASK	(0x00000001)
+#define CM33_TO_CA55_MASK	(0x0FFFFFFF)
+
+#define CPG_SIPLL3_MON		(0x13C)	// PLL3 (SSCG) Monitor Register
+#define PLL3_RESET		BIT(0)	// SSCG PLL3 Operating mode monitoring
+#define CPG_PLL6_STBY		(0x050) // PLL6 Standby Control Reigster
+#define PLL6_STBY_SSCG_EN	BIT(2)	// SSCG enable or disable setting
+#define CPG_CLKON_CM33		(0x504)	// Clock Control Register Cortex-M33
+#define CPG_CLKMON_CM33	(0x684)	// Clock Monitor Register Cortex-M33
+#define CPG_RST_CM33		(0x804)	// Reset Control Register Cortex-M33
+#define CPG_RSTMON_CM33	(0x984)	// Reset Monitor Register Cortex-M33
+
+#define SYS_CM33_CFG0		(0x844)	// CM33 Config Register0
+#define SYS_CM33_CFG1		(0x848)	// CM33 Config Register1
+#define SYS_CM33_CFG2		(0x84C)	// CM33 Config Register2
+#define SYS_CM33_CFG3		(0x850)	// CM33 Config Register3
+#define SYS_CM33FPU_CFG0	(0x884)	// CM33FPU Config Register0
+#define SYS_CM33FPU_CFG1	(0x888)	// CM33FPU Config Register1
+#define SYS_CM33FPU_CFG2	(0x88C)	// CM33FPU Config Register2
+#define SYS_CM33FPU_CFG3	(0x890)	// CM33FPU Config Register3
+#define SYS_LSI_MODE		(0xA00)	// LSI Mode Signal Register
+#define SYS_LP_CM33CTL1	(0xD28)	// Lowpower Sequence CM33 Control Register1
+#define SYS_LP_CM33FPUCTL1	(0xD58)	// Lowpower Sequence CM33FPU Control Register1
+
+#define CPG_CLKON_CM33_CLK0_ON_MASK	(0x00000001)
+#define CPG_CLKON_CM33_CLK8_ON_MASK	(0x00000100)
+
+#define RSC_TBL_SIZE		(0x1000)
+
+struct rz_rproc_pdata {
+	struct reset_control *nporeset;
+	struct reset_control *nsysreset;
+	struct reset_control *miscresetn;
+	struct regmap *cpg_regmap;
+	struct regmap *sysc_regmap;
+	u32 bootaddr[2];
+	u32 core;
+};
+
+static int rz_rproc_mem_alloc(struct rproc *rproc,
+				 struct rproc_mem_entry *mem)
+{
+	struct device *dev = rproc->dev.parent;
+	void __iomem *va;
+
+	dev_dbg(dev, "map memory: %pa+%zx\n", &mem->dma, mem->len);
+	va = devm_ioremap_wc(dev, mem->dma, mem->len);
+	if (!va) {
+		dev_err(dev, "unable to map memory region: %pa+%zx\n",
+			&mem->dma, mem->len);
+		return -ENOMEM;
+	}
+
+	/* Update memory entry va */
+	mem->va = va;
+
+	return 0;
+}
+
+static int rz_rproc_mem_release(struct rproc *rproc,
+				   struct rproc_mem_entry *mem)
+{
+	struct device *dev = rproc->dev.parent;
+
+	dev_dbg(dev, "unmap memory: %pa\n", &mem->dma);
+	devm_iounmap(dev, mem->va);
+
+	return 0;
+}
+
+static int rz_rproc_prepare(struct rproc *rproc)
+{
+	struct device *dev = rproc->dev.parent;
+	struct platform_device *pdev = to_platform_device(dev);
+	struct device_node *np = dev->of_node;
+	struct of_phandle_iterator it;
+	struct rproc_mem_entry *mem;
+	struct reserved_mem *rmem;
+	struct resource *res;
+	int index = 0;
+	int i;
+	u32 da;
+
+	/* Register resources */
+	for (i = 0; i < pdev->num_resources; i++) {
+		res = pdev->resource + i;
+
+		/* No need to translate pa to da, RZ/G3S use same map */
+		da = res->start;
+
+		mem = rproc_mem_entry_init(dev, NULL,
+					   res->start,
+					   resource_size(res), da,
+					   rz_rproc_mem_alloc,
+					   rz_rproc_mem_release,
+					   res->name);
+		if (!mem)
+			return -ENOMEM;
+
+		rproc_add_carveout(rproc, mem);
+	}
+
+	/* Register associated reserved memory regions */
+	of_phandle_iterator_init(&it, np, "memory-region", NULL, 0);
+	while (of_phandle_iterator_next(&it) == 0) {
+		rmem = of_reserved_mem_lookup(it.node);
+		if (!rmem) {
+			dev_err(dev, "unable to acquire memory-region\n");
+			return -EINVAL;
+		}
+
+		if (rmem->base > U32_MAX)
+			return -EINVAL;
+
+		/* No need to translate pa to da, RZ/G3S use same map */
+		da = rmem->base;
+
+		/*  No need to map vdev buffer */
+		if (strcmp(it.node->name, "vdev0buffer")) {
+			mem = rproc_mem_entry_init(dev, NULL,
+						   rmem->base,
+						   rmem->size, da,
+						   rz_rproc_mem_alloc,
+						   rz_rproc_mem_release,
+						   it.node->name);
+		} else {
+			mem = rproc_of_resm_mem_entry_init(dev, index,
+							   rmem->size,
+							   rmem->base,
+							   it.node->name);
+		}
+
+		if (!mem)
+			return -ENOMEM;
+
+		rproc_add_carveout(rproc, mem);
+		index++;
+	}
+
+	return 0;
+}
+
+static int rz_rproc_start(struct rproc *rproc)
+{
+	struct device *dev = rproc->dev.parent;
+	struct rz_rproc_pdata *pdata = rproc->priv;
+	uint32_t val;
+	uint32_t sys_lsi_mode_val;
+	void __iomem *sys_base;
+
+	/* ioremap SYSC register */
+	sys_base = ioremap(0x11020000, 0x4);
+	if (!sys_base) {
+		dev_err(&rproc->dev,"Failed to map memory\n");
+		return -ENOMEM;
+	}
+
+	sys_lsi_mode_val = ioread32(sys_base + SYS_LSI_MODE);
+	if (0 == (sys_lsi_mode_val & BOOTCPUSEL_MASK)) {
+		dev_warn(dev, "CM33 invocation via remoteproc is NOT supported under CM33 cold boot\n");
+		/* Do nothing */
+	} else {
+		if (pdata->core == 0) {
+			/* Configure secure and non-secure SysTick based on SSL setting */
+			regmap_read(pdata->cpg_regmap, CPG_PLL6_STBY, &val);
+			if ((val & PLL6_STBY_SSCG_EN) != 0) {
+				/* Normal mode */
+				iowrite32(0x01012E1E, sys_base + SYS_CM33_CFG0);
+				iowrite32(0x01012E1E, sys_base + SYS_CM33_CFG1);
+			} else {
+				/* Standby mode */
+				iowrite32(0x0001312C, sys_base + SYS_CM33_CFG0);
+				iowrite32(0x0001312C, sys_base + SYS_CM33_CFG1);
+			}
+
+			/* Set secure and non-secure vectore address */
+			iowrite32(pdata->bootaddr[0], sys_base + SYS_CM33_CFG2);
+			iowrite32(pdata->bootaddr[1], sys_base + SYS_CM33_CFG3);
+
+			/* Set register CPG_CLKON_CM33 for CM33 core */
+			regmap_write(pdata->cpg_regmap, CPG_CLKON_CM33, 0x00010001);
+
+			do
+			{
+				regmap_read(pdata->cpg_regmap, CPG_CLKMON_CM33, &val);
+			} while ((val & CPG_CLKON_CM33_CLK0_ON_MASK) == 0);
+
+			/* Set register CPG_RST_CM33 to reset CM33 core */
+			regmap_write(pdata->cpg_regmap, CPG_RST_CM33, 0x00040004);
+			regmap_write(pdata->cpg_regmap, CPG_RST_CM33, 0x00070007);
+
+			do
+			{
+				regmap_read(pdata->cpg_regmap, CPG_RSTMON_CM33, &val);
+			} while ((val & 0x00000007) != 0);
+
+		} else {
+			/* Configure secure and non-secure SysTick based on SSL setting */
+			regmap_read(pdata->cpg_regmap, CPG_PLL6_STBY, &val);
+			if ((val & PLL6_STBY_SSCG_EN) != 0) {
+				/* Normal mode */
+				iowrite32(0x01012E1E, sys_base + SYS_CM33FPU_CFG0);
+				iowrite32(0x01012E1E, sys_base + SYS_CM33FPU_CFG1);
+			} else {
+				/* Standby mode */
+				iowrite32(0x0001312C, sys_base + SYS_CM33FPU_CFG0);
+				iowrite32(0x0001312C, sys_base + SYS_CM33FPU_CFG1);
+			}
+
+			/* Set secure and non-secure vectore address */
+			iowrite32(pdata->bootaddr[0], sys_base + SYS_CM33FPU_CFG2);
+			iowrite32(pdata->bootaddr[1], sys_base + SYS_CM33FPU_CFG3);
+
+			/* Set register CPG_CLKON_CM33 for CM33 FPU core */
+			regmap_write(pdata->cpg_regmap, CPG_CLKON_CM33, 0x01000100);
+
+			do
+			{
+				regmap_read(pdata->cpg_regmap, CPG_CLKMON_CM33, &val);
+			} while ((val & CPG_CLKON_CM33_CLK8_ON_MASK) == 0);
+
+			/* Set register CPG_RST_CM33 to reset CM33 FPU core */
+			regmap_write(pdata->cpg_regmap, CPG_RST_CM33, 0x04000400);
+			regmap_write(pdata->cpg_regmap, CPG_RST_CM33, 0x07000700);
+
+			do
+			{
+				regmap_read(pdata->cpg_regmap, CPG_RSTMON_CM33, &val);
+			} while ((val & 0x00000700) != 0);
+		}
+
+	}
+
+	/* iounmap SYSC register */
+	iounmap(sys_base);
+
+	return 0;
+}
+
+static int rz_rproc_stop(struct rproc *rproc)
+{
+	struct device *dev = rproc->dev.parent;
+	struct rz_rproc_pdata *pdata = rproc->priv;
+	struct rproc_mem_entry *carveout;
+	int ret;
+
+	/* Clear registered carveouts */
+	list_for_each_entry(carveout, &rproc->carveouts, node) {
+		if (!carveout->va)
+			continue;
+
+		memset(carveout->va, 0, carveout->len);
+	}
+
+	ret = reset_control_assert(pdata->nporeset);
+	if (ret) {
+		dev_err(dev, "failed to assert nporeset\n");
+		return ret;
+	}
+
+	ret = reset_control_assert(pdata->nsysreset);
+	if (ret) {
+		dev_err(dev, "failed to assert nsysreset\n");
+		return ret;
+	}
+
+	ret = reset_control_assert(pdata->miscresetn);
+	if (ret) {
+		dev_err(dev, "failed to assert miscresetn\n");
+		return ret;
+	}
+
+	pm_runtime_put(dev);
+
+	return 0;
+}
+
+static int rz_rproc_attach(struct rproc *rproc)
+{
+	/* Do nothing */
+	return 0;
+}
+
+static void rz_rproc_kick(struct rproc *rproc, int vqid)
+{
+	/* Not supported Linux RPMsg yet */
+}
+
+static int cm33_to_ca55(u64 *da)
+{
+	if ((CM33_SRAM_END >= *da) && (*da >= CM33_SRAM_START)) {
+		*da = CA55_SRAM_START + (*da & CM33_TO_CA55_MASK);
+		return 0;
+	}
+	else if ((CM33_DDR_END >= *da) && (*da >= CM33_DDR_START)) {
+		*da = CA55_DDR_START + (*da & CM33_TO_CA55_MASK);
+		return 0;
+	}
+	else
+		return -EINVAL;
+}
+
+static void *rz_rproc_da_to_va(struct rproc *rproc, u64 da, size_t len, bool *is_iomem)
+{
+	struct device *dev = rproc->dev.parent;
+	struct rproc_mem_entry *carveout;
+	void *ptr = NULL;
+	int ret;
+
+	/* rproc_da_to_va() is called in many places. @da value can either be
+	 * the address of segments in .elf file which is in CM33 address space
+	 * or the address of .resource_table's trace buffer which is in CA55
+	 * address space. Trace buffer is expected to be in the dedicated memory
+	 * region for CM33 in DDR. Here, we first check if @da is address of
+	 * trace buffer or segments then have corresponding action.
+	 */
+	if ((CA55_DDR_CM33_END >= da) && (da >= CA55_DDR_CM33_START)) {
+		/* @da is address of trace buffer. Do nothing. */
+	} else {
+		/* @da is address of segment. Translate @da to CA55 space. */
+		ret = cm33_to_ca55(&da);
+		if (ret) {
+			dev_err(dev, "invalid address\n");
+			return ptr;
+		}
+	}
+
+
+	list_for_each_entry(carveout, &rproc->carveouts, node) {
+		int offset = da - carveout->da;
+
+		/* Verify that carveout is allocated */
+		if (!carveout->va)
+			continue;
+
+		/* try next carveout if da is too small */
+		if (offset < 0)
+			continue;
+
+		/* try next carveout if da is too large */
+		if (offset + len > carveout->len)
+			continue;
+
+		ptr = carveout->va + offset;
+
+		break;
+	}
+
+	return ptr;
+}
+
+static int rz_rproc_parse_fw(struct rproc *rproc, const struct firmware *fw)
+{
+	int ret;
+
+	ret = rproc_elf_load_rsc_table(rproc, fw);
+	if (ret)
+		dev_warn(&rproc->dev, "no resource table found for this firmware\n");
+
+	return 0;
+}
+
+static const struct rproc_ops rz_rproc_ops = {
+	.prepare		= rz_rproc_prepare,
+	.start			= rz_rproc_start,
+	.stop			= rz_rproc_stop,
+	.attach			= rz_rproc_attach,
+	.kick			= rz_rproc_kick,
+	.da_to_va		= rz_rproc_da_to_va,
+	.parse_fw		= rz_rproc_parse_fw,
+	.find_loaded_rsc_table	= rproc_elf_find_loaded_rsc_table,
+	.load			= rproc_elf_load_segments,
+	.sanity_check		= rproc_elf_sanity_check,
+	.get_boot_addr		= rproc_elf_get_boot_addr,
+};
+
+static int rz_rproc_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct rz_rproc_pdata *pdata;
+	struct rproc *rproc;
+	uint32_t val;
+	int ret;
+	int i;
+
+	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
+	if (!pdata)
+		return -ENOMEM;
+
+	rproc = devm_rproc_alloc(dev, np->name, &rz_rproc_ops, NULL,
+				 sizeof(*pdata));
+	if (!rproc)
+		return -ENOMEM;
+
+	of_property_read_u32_index(np, "renesas,rz-core", 0, &pdata->core);
+
+	/* Get remgap of cpg and sysc */
+	pdata->cpg_regmap = syscon_regmap_lookup_by_phandle(np, "renesas,rz-cpg");
+	if (IS_ERR(pdata->cpg_regmap)) {
+		ret = PTR_ERR(pdata->cpg_regmap);
+		dev_err(dev, "failed to lookup cpg regmap\n");
+		return ret;
+	}
+
+	pdata->sysc_regmap = syscon_regmap_lookup_by_phandle(np, "renesas,rz-sysc");
+	if (IS_ERR(pdata->sysc_regmap)) {
+		ret = PTR_ERR(pdata->sysc_regmap);
+		dev_err(dev, "failed to lookup sysc regmap\n");
+		return ret;
+	}
+
+	/* Obtain reference to reset controllers */
+	pdata->nporeset = devm_reset_control_get_exclusive(dev, "nporeset");
+	if (IS_ERR(pdata->nporeset)) {
+		ret = PTR_ERR(pdata->nporeset);
+		dev_err(dev, "failed to acquire nporeset\n");
+		return ret;
+	}
+
+	pdata->nsysreset = devm_reset_control_get_exclusive(dev, "nsysreset");
+	if (IS_ERR(pdata->nsysreset)) {
+		ret = PTR_ERR(pdata->nsysreset);
+		dev_err(dev, "failed to acquire nsysreset\n");
+		return ret;
+	}
+
+	pdata->miscresetn = devm_reset_control_get_exclusive(dev, "miscresetn");
+	if (IS_ERR(pdata->miscresetn)) {
+		ret = PTR_ERR(pdata->miscresetn);
+		dev_err(dev, "failed to acquire miscresetn\n");
+		return ret;
+	}
+
+	/* Get secure and non-secure vector address */
+	for (i = 0; i < 2; i++) {
+		if (of_property_read_u32_index(np, "renesas,rz-bootaddrs", i,
+					       &pdata->bootaddr[i])) {
+			dev_err(dev, "invalid boot address\n");
+			return -EINVAL;
+		}
+	}
+
+	rproc->priv = pdata;
+	rproc->auto_boot = of_get_property(np, "renesas,rz-autoboot", NULL) ?
+			   true : false;
+
+	pm_runtime_enable(dev);
+
+	/* Check remote processor state */
+	regmap_read(pdata->cpg_regmap, CPG_RSTMON_CM33, &val);
+	if ((!(val & 0x00000007) & (pdata->core == 0)) ||
+	    (!(val & 0x00000700) & (pdata->core == 1))) {
+		/* Remote processor is already powered on */
+		struct resource_table *rsc_table = NULL;
+		uint32_t rsc_pa ;
+		void __iomem *rsc_va;
+
+		rproc->state = RPROC_DETACHED;
+
+		pm_runtime_get_sync(dev);
+
+		/* Get loaded rsc table */
+		if (of_property_read_u32_index(np, "renesas,rz-rsctbl", 0, &rsc_pa)) {
+			dev_warn(dev, "detached processor's firmware has no resource table\n");
+			goto rproc_prepare;
+		}
+
+		rsc_va = devm_ioremap_wc(dev, rsc_pa, RSC_TBL_SIZE);
+		if (!rsc_va) {
+			dev_err(dev, "unable to map memory region: %pa+%d\n",
+				&rsc_pa, RSC_TBL_SIZE);
+			goto rproc_prepare;
+		}
+
+		rsc_table = (struct resource_table *)rsc_va;
+		if (rsc_table->ver !=1) {
+			devm_iounmap(dev, rsc_va);
+			dev_warn(dev, "detached processor's firmware has no resource table\n");
+		} else {
+			rproc->table_ptr = rsc_table;
+			/* Assuming the resource table fits in 1kB is fair */
+			rproc->table_sz = RSC_TBL_SIZE;
+		}
+
+rproc_prepare:
+		/* Parse memory regions */
+		rz_rproc_prepare(rproc);
+	}
+
+	platform_set_drvdata(pdev, rproc);
+
+	/* Register remote processor */
+	ret = rproc_add(rproc);
+	if (ret) {
+		dev_err(dev, "failed to register rproc\n");
+		goto error;
+	}
+
+	dev_info(dev, "probed\n");
+
+	return 0;
+
+error:
+	rproc_free(rproc);
+
+	pm_runtime_disable(dev);
+
+	return ret;
+}
+
+static void rz_rproc_remove(struct platform_device *pdev)
+{
+	struct rproc *rproc = platform_get_drvdata(pdev);
+
+	rproc_del(rproc);
+
+	rproc_free(rproc);
+
+	pm_runtime_disable(&pdev->dev);
+
+}
+
+static const struct of_device_id rz_rproc_of_match[] = {
+	{ .compatible = "renesas,rz-cm33", },
+	{ /* end of list */ },
+};
+MODULE_DEVICE_TABLE(of, rz_rproc_of_match);
+
+static struct platform_driver rz_rproc_driver = {
+	.probe	= rz_rproc_probe,
+	.remove = rz_rproc_remove,
+	.driver = {
+		.name = "rz-rproc",
+		.of_match_table = rz_rproc_of_match,
+	},
+};
+module_platform_driver(rz_rproc_driver);
+
+MODULE_AUTHOR("Tu Duong <tu.duong.zy@renesas.com>");
+MODULE_DESCRIPTION("Renesas RZ remote processor control driver");
+MODULE_LICENSE("GPL v2");
+
